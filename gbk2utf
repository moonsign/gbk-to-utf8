#!/bin/sh

to_convert_encodings=(
"iso-8859-1"
)

extentions=(
"*.cpp*"
"*.cxx*"
"*.c*"
"*.h*"
"*.txt*"
"*makefile*"
"*.sh*"
"*.sql*"
"*.ini*"
"*.sys*"
"*.xml*"
"*.java*"
"*.properties*"
)

MAXDEPTH=1

FILECMD=
REALPATHCMD=
case $(uname) in
	"Linux")
	FILECMD="file -i"
	REALPATHCMD="readlink -f"
	;;
	"Darwin")
	FILECMD="file -I"
	REALPATHCMD="realpath"
	"${REALPATHCMD}" >& /dev/null
	if [[ $? -eq 127 ]]; then
		echo "Seems you don't have realpath installed on your mac."
		echo "If you're using homebrew you install with: brew install coreutils"
		exit 0
	fi
	;;
esac

CONFFILE="$(dirname "$(${REALPATHCMD} "$0")")/$(basename $0 .sh).conf"
if [[ -f "${CONFFILE}" ]]; then
	source "${CONFFILE}"
fi

MARGIN="   "

_should_i_convert(){
	for to_convert_encoding in ${to_convert_encodings[@]}; do
		if [[ "$1" = "${to_convert_encoding}" ]]; then
			return 0
		fi
	done
	return 1
}

_convert()
{
	to_convert="$1"
	encoding="$(${FILECMD} "${to_convert}"| awk '{split($0,a,"charset=");print a[2]}')"
	printf "${MARGIN}[PROMP] Converting \"${to_convert}\"($([[ -z "${encoding}" ]]&&echo "unknown"||echo "${encoding}")) ... "
	if [[ -z "${encoding}" ]]; then
		byte_count=$(wc -c "${to_convert}"|awk '{print $1}')
		char_count=$(wc -m "${to_convert}"|awk '{print $1}')
		if [[ ${byte_count} -eq ${char_count} ]]; then
			echo "skipped, ASCII text."
			return
		fi
		head -n 500 "${to_convert}"| iconv -f gb18030 -t gb18030 >& /dev/null
		if [[ $? -eq 0 ]]; then
			encoding="iso-8859-1"
		else
			# echo "[INFO] Skipped unknown encoding file ${to_convert}" >> ${logfile}
			echo "aborted, failed to try."
			return
		fi
	fi

	_should_i_convert "${encoding}"
	if [[ $? -eq 0 ]]; then
		icmd="iconv -s -f gb18030 -t utf8 \"${to_convert}\" > \"${tmpfile}\""
		#echo ${icmd}
		eval ${icmd} >& /dev/null
		if [ $? -eq 0 ]; then
			mcmd="mv -f \"${tmpfile}\" \"${to_convert}\""
			#echo ${mcmd}
			eval ${mcmd} >& /dev/null
			if [[ $? -eq 0 ]]; then
				echo "converted."
				printf "${MARGIN}"
				echo "[INFO] Finished converting file \"${to_convert}\"." | tee -a ${logfile}
				let count++
			else
				echo "failed."
				printf "${MARGIN}"
				echo "[ERROR] Failed to move \"${tmpfile}\" to \"${to_convert}\"." | tee -a ${logfile}
			fi
		else
			echo "failed."
			printf "${MARGIN}"
			echo "[ERROR] Failed to convert file \"${to_convert}\"(${encoding})" | tee -a ${logfile}
		fi
	else
		echo "skipped."
		# printf "${MARGIN}"
		# echo "[INFO] Skipped file \"${to_convert}\"(${encoding})" >> ${logfile}
	fi
}

#main begin
echo
if [[ ! $1 ]]; then
	echo "${MARGIN}Convert file encoding from GBK/GB18030 to UTF-8."
	echo
	echo "${MARGIN}Usage: $(basename $0) [directory]"
	echo "${MARGIN}       $(basename $0) [file1] [file2] [file3] ..."
	echo
	exit 0
fi

filelist=
if [[ -d $1 ]]; then
	fcmd="find \"$1\" -maxdepth ${MAXDEPTH} -type f -a \( -name \"${extentions[0]}\""
	for i in $(seq  1 $(( ${#extentions[@]} -1 )) ) ; do
		fcmd="${fcmd} -o -name \"${extentions[$i]}\""
	done
	fcmd="${fcmd} \)"
	filelist="$(eval "${fcmd}" 2> /dev/null)"
else
	filelist="$(ls -d $@ 2> /dev/null)"
fi

logfile="${HOME}/$(basename $0).log"
if [ ! -f ${logfile} ]; then
	touch ${logfile}
fi

if [[ -z "${filelist}" ]]; then
	echo "${MARGIN}No file was found."
	echo
	exit 0
fi

tmpfile="$(mktemp -t "$(basename $0)_XXXXXX")"
count=0
printf "${MARGIN}"
echo "[$(date "+%Y-%m-%d %H:%M:%S")] Strat converting." | tee -a ${logfile}
# eval "${fcmd}" 2> /dev/null | while read file; do
echo "${filelist}" | while read file; do
	if [[ -f "${file}" ]]; then
		if [[ "${file}" =~ ^.*$(basename $0).*$ ]]; then
			continue
		fi
		_convert "$(${REALPATHCMD} "${file}")"
	else
		echo "${MARGIN}[PROMP] Skipped \"${file}\", it's a directory."
	fi
done

rm -f "${tmpfile}"

printf "${MARGIN}"
echo "[$(date "+%Y-%m-%d %H:%M:%S")] Finished converting ${count} file$([[ ${count} -gt 1 ]]&&echo s)." | tee -a ${logfile}
echo "" >> ${logfile}
echo "${MARGIN}[PROMP] You can view \"${logfile}\" for details."
echo
